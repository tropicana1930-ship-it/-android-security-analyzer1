name: Android Security Analysis Workflow

# Define cuándo se ejecutará este flujo de trabajo
on:
  # Se ejecuta cada vez que hay un push al branch 'main'
  push:
    branches:
      - main
  # Permite ejecutarlo manualmente desde la pestaña 'Actions' de GitHub
  workflow_dispatch:

jobs:
  # Tarea 1: Autenticación en Azure y Análisis del Backend
  backend-analysis:
    runs-on: ubuntu-latest

    steps:
    # 1. Obtener el código del repositorio
    - name: Checkout repository code
      uses: actions/checkout@v4

    # 2. Configurar el entorno de Python
    - name: Set up Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    # 3. Instalar las dependencias de Python (del requirements.txt)
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        
    # 4. Login en Azure (¡Paso clave!)
    # Esto utiliza los SECRETS que configuraste en GitHub
    - name: Azure Login
      uses: azure/login@v1.4.6 # Usamos una versión estable
      with:
        creds: ${{ toJson({
          'clientId': secrets.CLIENT_ID,
          'clientSecret': secrets.CLIENT_SECRET,
          'tenantId': secrets.TENANT_ID
        }) }}
        enable-AzPSSession: false # Deshabilitar si solo usas la CLI/SDK de Azure
    
    # 5. Ejecutar el Script de Análisis de Seguridad del Backend
    - name: Run Backend Security Analyzer
      # El script device_analyzer.py ejecutará el análisis de seguridad
      run: |
        echo "Iniciando el análisis de seguridad del backend y credenciales..."
        python backend/device_analyzer.py 
        echo "Análisis de seguridad completado. Verifique el log."

  # Tarea 2: Análisis de Código Estático de la App Móvil (Android Lint)
  mobile-static-analysis:
    runs-on: ubuntu-latest
    needs: [backend-analysis] # Se ejecuta DESPUÉS de que el backend termine

    steps:
    # 1. Obtener el código del repositorio
    - name: Checkout repository code
      uses: actions/checkout@v4

    # 2. Configurar el entorno Java (necesario para Android/Gradle)
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        
    # 3. Ejecutar el análisis estático (Lint) en la app Android
    - name: Run Android Lint Analysis
      # Android Lint busca bugs, problemas de rendimiento, y problemas de seguridad
      # Necesita permiso de ejecución para el wrapper de Gradle
      run: |
        echo "Ejecutando análisis estático (Lint) en la estructura Android..."
        chmod +x mobile-app/gradlew 
        # El comando real de Lint requiere una configuración más completa de Gradle que se omite por ser un esqueleto.
        # En un proyecto real, el comando sería: ./mobile-app/gradlew :app:lintDebug
        echo "Comando Lint simulado: La configuración completa de Gradle no está lista, pero la prueba de ejecución fue exitosa."
